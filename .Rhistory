0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * priors[1]) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * priors[1]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * priors[2]) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * priors[2]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/rgamma(1, a.sigma, 1/b.sigma)
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * priors[2]) + lvr0(prop) +
lvr1(prop, alpha, beta1, beta2, b[i], data[,5])
bottom = - mu[i]**2 / (2 * priors[2]) + lvr0(mu[i]) +
lvr1(mu[i], alpha, beta1, beta2, b[i], data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * priors[7]) + lvr1(mu[i], alpha, beta1, beta2, prop, data[,5])
bottom = - b[i]**2 / (2 * priors[7]) + lvr1(mu[i], alpha, beta1, beta2, b[i], data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(1, 1, 1, 0.001, 0.001, 1, 1))
library(coda)
burnin = 1:1000
plot(mcmc(chain[-burnin,])[,1:4])
plot(mcmc(chain[-burnin,])[,1:4])
summary(mcmc(chain[-burnin,]))$statistics[1:4,]
plot(mcmc(chain[-burnin,])[,1:4])
Gibbs = function(nchain, data, priors){
ni = nrow(data)
# État initial proposé par les auteurs
alpha = 0
beta1 = 0
beta2 = 0
sigma = 1
mu = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * priors[1]) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * priors[1]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * priors[2]) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * priors[2]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/sqrt(rgamma(1, a.sigma, 1/b.sigma))
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * priors[2]) +
r0[i] * log(p0(prop)) + (n0[i] - r0[i]) * log(1 - p0(prop)) +
r1[i] * log(p1(prop, alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(prop, alpha, beta1, beta2, b[i], data[,5]))
bottom = - mu[i]**2 / (2 * priors[2]) +
r0[i] * log(p0(mu[i])) + (n0[i] - r0[i]) * log(1 - p0(mu[i])) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * priors[7]) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, prop, data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, prop, data[,5]))
bottom = - b[i]**2 / (2 * priors[7]) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(1, 1, 1, 0.001, 0.001, 1, 1))
library(coda)
burnin = 1:1000
plot(mcmc(chain[-burnin,])[,1:4])
summary(mcmc(chain[-burnin,]))$statistics[1:4,]
summary(mcmc(chain[-burnin,]))$statistics[1:4,]$mean
?summary
s = summary(mcmc(chain[-burnin,]))$statistics[1:4,]
View(s)
s[,1]
round(s[,1])
round(s[,1],3)
Gibbs = function(nchain, data, priors){
ni = nrow(data)
# État initial proposé par les auteurs
alpha = 0
beta1 = 0
beta2 = 0
sigma = 1
mu = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * priors[1]) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * priors[1]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * priors[2]) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * priors[2]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * priors[3]) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/rgamma(1, a.sigma, 1/b.sigma)
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * priors[2]) +
r0[i] * log(p0(prop)) + (n0[i] - r0[i]) * log(1 - p0(prop)) +
r1[i] * log(p1(prop, alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(prop, alpha, beta1, beta2, b[i], data[,5]))
bottom = - mu[i]**2 / (2 * priors[2]) +
r0[i] * log(p0(mu[i])) + (n0[i] - r0[i]) * log(1 - p0(mu[i])) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * priors[7]) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, prop, data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, prop, data[,5]))
bottom = - b[i]**2 / (2 * priors[7]) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(1, 1, 1, 0.001, 0.001, 1, 1))
plot(mcmc(chain[-burnin,])[,1:4])
s = summary(mcmc(chain[-burnin,]))$statistics[1:4,]
View(s)
round(s[,1],3)
Gibbs = function(nchain, data, priors){
ni = nrow(data)
# État initial proposé par les auteurs
alpha = 0
beta1 = 0
beta2 = 0
sigma = 1
mu = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/rgamma(1, a.sigma, 1/b.sigma)
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * 1000**2) +
r0[i] * log(p0(prop)) + (n0[i] - r0[i]) * log(1 - p0(prop)) +
r1[i] * log(p1(prop, alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(prop, alpha, beta1, beta2, b[i], data[,5]))
bottom = - mu[i]**2 / (2 * 1000**2) +
r0[i] * log(p0(mu[i])) + (n0[i] - r0[i]) * log(1 - p0(mu[i])) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * sigma) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, prop, data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, prop, data[,5]))
bottom = - b[i]**2 / (2 * sigma) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(0.1, 0.1, 0.1, 0.001, 0.001, 1, 1))
library(coda)
burnin = 1:1000
plot(mcmc(chain[-burnin,])[,1:4])
s = summary(mcmc(chain[-burnin,]))$statistics[1:4,]
View(s)
View(y)
y[,5]
y[,5][1]
Gibbs = function(nchain, data, priors){
ni = nrow(data)
# État initial proposé par les auteurs
alpha = 0
beta1 = 0
beta2 = 0
sigma = 1
mu = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/rgamma(1, a.sigma, 1/b.sigma)
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * 1000**2) +
r0[i] * log(p0(prop)) + (n0[i] - r0[i]) * log(1 - p0(prop)) +
r1[i] * log(p1(prop, alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(prop, alpha, beta1, beta2, b[i], data[,5][i]))
bottom = - mu[i]**2 / (2 * 1000**2) +
r0[i] * log(p0(mu[i])) + (n0[i] - r0[i]) * log(1 - p0(mu[i])) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * sigma) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, prop, data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, prop, data[,5][i]))
bottom = - b[i]**2 / (2 * sigma) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(0.1, 0.1, 0.1, 0.001, 0.001, 1, 1))
plot(mcmc(chain[-burnin,])[,1:4])
s = summary(mcmc(chain[-burnin,]))$statistics[1:4,]
View(s)
Gibbs = function(nchain, data, priors){
ni = nrow(data)
# État initial proposé par les auteurs
alpha = 0
beta1 = 0
beta2 = 0
sigma = 1
mu = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
b = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
init = c(alpha, beta1, beta2, sigma, mu, b)
# Début de la chaîne
chain = matrix(NA, nchain + 1, 244)
chain[1,] = init
for (k in 1:nchain){
# Mise à jour de alpha
prop = rnorm(1, alpha, sqrt(priors[1]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, prop, beta1, beta2, b, data[,5])
bottom = - alpha**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
alpha = prop
}
# Mise à jour de beta1
prop = rnorm(1, beta1, sqrt(priors[2]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, prop, beta2, b, data[,5])
bottom = - beta1**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta1 = prop
}
# Mise à jour de beta2
prop = rnorm(1, beta2, sqrt(priors[3]))
top = - prop**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, prop, b, data[,5])
bottom = - beta2**2 / (2 * 1000**2) + lvr1(mu, alpha, beta1, beta2, b, data[,5])
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
beta2 = prop
}
# Mise à jour de sigma
a.sigma = priors[4] + ni/2
b.sigma = (2 * priors[5] + sum(b**2))/2
sigma = 1/sqrt(rgamma(1, a.sigma, 1/b.sigma))
# Mise à jour de mu
for (i in 1:length(mu)){
prop = rnorm(1, mu[i], sqrt(priors[6]))
top = - prop**2 / (2 * 1000**2) +
r0[i] * log(p0(prop)) + (n0[i] - r0[i]) * log(1 - p0(prop)) +
r1[i] * log(p1(prop, alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(prop, alpha, beta1, beta2, b[i], data[,5][i]))
bottom = - mu[i]**2 / (2 * 1000**2) +
r0[i] * log(p0(mu[i])) + (n0[i] - r0[i]) * log(1 - p0(mu[i])) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
mu[i] = prop
}
}
# Mise à jour de b
for (i in 1:length(b)){
prop = rnorm(1, b[i], sqrt(priors[7]))
top = - prop**2 / (2 * sigma**2) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, prop, data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, prop, data[,5][i]))
bottom = - b[i]**2 / (2 * sigma**2) +
r1[i] * log(p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i])) +
(n1[i] - r1[i]) * log(1 - p1(mu[i], alpha, beta1, beta2, b[i], data[,5][i]))
acc_prob = exp(top - bottom)
if (runif(1) < acc_prob){
b[i] = prop
}
}
# Mise à jour de la chaîne
chain[k+1,] = c(alpha, beta1, beta2, sigma, mu, b)
}
return(chain)
}
chain = Gibbs(10**4, y, c(0.1, 0.1, 0.1, 0.001, 0.001, 1, 1))
library(coda)
burnin = 1:1000
plot(mcmc(chain[-burnin,])[,1:4])
s = summary(mcmc(chain[-burnin,]))$statistics[1:4,]
View(s)
